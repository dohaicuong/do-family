{"version":3,"sources":["components/Family/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Family","data","confirm","useConfirm","Box","tree","renderContent","props","Tooltip","title","displayName","Avatar","src","photoURL","style","cursor","width","height","onClick","description","handleClick","theme","createMuiTheme","App","className","Helmet","rel","href","ThemeProvider","CssBaseline","marginTop","Typography","variant","gutterBottom","textAlign","spouse","children","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0PAuDeA,EAnCuB,SAAC,GAAc,IAAZC,EAAW,EAAXA,KACjCC,EAAUC,cAKhB,OACE,kBAACC,EAAA,EAAD,KACE,kBAAC,IAAD,CAEEC,KAAMJ,EACNK,cAAe,SAACC,GACd,OACE,kBAACC,EAAA,EAAD,CAASC,MAAOF,EAAMG,aACpB,kBAACC,EAAA,EAAD,CACEC,IAAKL,EAAMM,SACXC,MAAO,CACLC,OAAQ,UACRC,MAAO,GACPC,OAAQ,IAEVC,QAAS,YAnBH,SAAC,GAAiC,IAA/BT,EAA8B,EAA9BA,MAAOU,EAAuB,EAAvBA,YAC5BjB,EAAQ,CAAEO,QAAOU,gBAmBHC,CAAY,CACVX,MAAOF,EAAMG,YACbS,YAAaZ,EAAMY,uBCpCjCE,EAAQC,cA6BCC,EA5BH,WACV,OACE,yBAAKC,UAAU,OACb,kBAACC,EAAA,EAAD,KACE,0BACEC,IAAI,aACJC,KAAK,iFAGT,kBAACC,EAAA,EAAD,CAAeP,MAAOA,GACpB,kBAACQ,EAAA,EAAD,MACA,kBAAC,IAAD,KACE,yBAAKf,MAAO,CAAEgB,UAAW,KACvB,kBAACC,EAAA,EAAD,CACEC,QAAQ,KACRC,cAAY,EACZnB,MAAO,CAAEoB,UAAW,WAHtB,aAOA,kBAAC,EAAD,CAAQjC,KAAMA,SAUpBA,EAAO,CACXS,YAAa,YACbyB,OAAQ,CACNzB,YAAa,eACbG,SAAU,2DACVM,YAAY,8SAEdiB,SAAU,CACR,CACE1B,YAAa,OACbG,SAAU,oLACVsB,OAAQ,CACNzB,YAAa,QAEf0B,SAAU,CACR,CACE1B,YAAa,YAInB,CACEA,YAAa,UAEf,CACEA,YAAa,YCnDC2B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDkIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.d570c736.chunk.js","sourcesContent":["import React from 'react'\n\nimport Box from '@material-ui/core/Box'\nimport FamilyTree from '@mui-treasury/components/chart/family'\nimport Avatar from '@material-ui/core/Avatar'\nimport { useConfirm } from 'material-ui-confirm'\nimport { Tooltip } from '@material-ui/core'\n\ntype Person = {\n  displayName: string\n  photoURL?: string\n  description?: string\n\n  spouse?: Person\n  children?: Person[]\n}\n\ntype FamilyProps = {\n  data: Person\n}\nconst Family: React.FC<FamilyProps> = ({ data }) => {\n  const confirm = useConfirm()\n  const handleClick = ({ title, description }: any) => {\n    confirm({ title, description })\n  }\n\n  return (\n    <Box>\n      <FamilyTree\n        // stretchIndexes={[2]}\n        tree={data}\n        renderContent={(props: any) => {\n          return (\n            <Tooltip title={props.displayName}>\n              <Avatar\n                src={props.photoURL}\n                style={{\n                  cursor: 'pointer',\n                  width: 60,\n                  height: 60,\n                }}\n                onClick={() => {\n                  handleClick({\n                    title: props.displayName,\n                    description: props.description\n                  })\n                }}\n              />\n            </Tooltip>\n          )\n        }}\n      />\n    </Box>\n  )\n}\nexport default Family\n","import React from 'react'\n\nimport { Helmet } from 'react-helmet'\nimport { ThemeProvider, createMuiTheme, CssBaseline, Typography } from '@material-ui/core'\nimport { ConfirmProvider } from 'material-ui-confirm'\n\nimport Family from 'components/Family'\n\nconst theme = createMuiTheme()\nconst App = () => {\n  return (\n    <div className='App'>\n      <Helmet>\n        <link\n          rel='stylesheet'\n          href='https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&display=swap'\n        />\n      </Helmet>\n      <ThemeProvider theme={theme}>\n        <CssBaseline />\n        <ConfirmProvider>\n          <div style={{ marginTop: 16 }}>\n            <Typography\n              variant='h5'\n              gutterBottom\n              style={{ textAlign: 'center' }}\n            >\n              Do Family\n            </Typography>\n            <Family data={data} />\n          </div>\n        </ConfirmProvider>\n      </ThemeProvider>\n    </div>\n  )\n}\n\nexport default App\n\nconst data = {\n  displayName: 'Yuki Yami',\n  spouse: {\n    displayName: 'Miku Hatsune',\n    photoURL: 'https://avatarfiles.alphacoders.com/107/thumb-107489.jpg',\n    description: `Hatsune Miku, sometimes called Miku Hatsune, is a Vocaloid software voicebank developed by Crypton Future Media and its official moe anthropomorph, a teenage girl with long, turquoise twintails. She uses Yamaha Corporation's Vocaloid 2, Vocaloid 3, and Vocaloid 4 singing synthesizing technologies.`\n  },\n  children: [\n    {\n      displayName: 'Mimi',\n      photoURL: 'https://encrypted-tbn0.gstatic.com/images?q=tbn%3AANd9GcQ9uphHgEYfAMnwCtOCtadyFD8VTyiyorYVi_aN5OymelT85Q3bujNVTDVcr93wLtlxHRGh6Pllu3zSCilUOzkjQrLN5x8RJ1T-fg&usqp=CAU&ec=45699844',\n      spouse: {\n        displayName: 'Yato'\n      },\n      children: [\n        {\n          displayName: 'Hattie',\n        },\n      ]\n    },\n    {\n      displayName: 'Hattie',\n    },\n    {\n      displayName: 'Hattie',\n    },\n    \n  ]\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from 'App'\nimport * as serviceWorker from 'serviceWorker'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\nserviceWorker.unregister()\n"],"sourceRoot":""}